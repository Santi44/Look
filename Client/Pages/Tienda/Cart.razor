@page "/cart"
@inject IJSRuntime JS
@inject ICarritoServicio carritoServicio
@inject IVentaServicio ventaServicio
@inject IToastService toastService
@inject NavigationManager _navServicio
@inject IPaymentService PaymentService
@attribute [Authorize(Roles = "Cliente")]

@using Lookeate.Client.Abstractions
@using Lookeate.Shared.Request
@using Microsoft.AspNetCore.Components.Authorization

<div class="row mt-4" style="display: flex; flex-direction: column; height: 100vh;">
    <div class="col-sm-8" style="flex: 1;">
        <div class="card mb-3">
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-sm table-bordered" style="background-color: azure;">
                        <!-- Celeste claro de fondo -->
                        <thead class="bg-primary text-white">
                            <!-- Encabezado con color azul claro -->
                            <tr>
                                <th style="width:102px"></th>
                                <th>Producto</th>
                                <th>Precio</th>
                                <th>Cantidad</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (lista.Any())
                            {
                                foreach (var item in lista)
                                {
                                    <tr>
                                        <td valign="middle">
                                            <img class="card-img-top" src="@item.Producto.Imagen" style="width:100px">
                                        </td>
                                        <td valign="middle">@item.Producto.Nombre</td>
                                        <td valign="middle">@item.Precio</td>
                                        <td valign="middle" align="center">
                                            <div class="btn-group" role="group" aria-label="Basic outlined example">
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() => Disminuir(item.Producto.IdProducto))">
                                                    <i class="oi oi-minus"></i>
                                                </button>
                                                <input class="form-control" readonly="readonly" style="width:50px" @bind-value="item.Cantidad" />
                                                <button type="button" class="btn btn-outline-dark" @onclick="(() => Aumentar(item.Producto.IdProducto))">
                                                    <i class="oi oi-plus"></i>
                                                </button>
                                            </div>
                                        </td>
                                        <td valign="middle">@item.Total</td>
                                        <td valign="middle">
                                            <button type="button" class="btn btn-outline-dark" @onclick="(async () => await Eliminar(item.Producto.IdProducto))">
                                                <i class="oi oi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6">
                                        <div class="alert alert-warning" role="alert">
                                            No hay productos en el carrito
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Botón de pago de Mercado Pago, colocado justo debajo del card-body -->
                <div id="wallet_container" class="mt-3">
                    <!-- Renderizar el botón de pago con Mercado Pago aquí -->
                </div>
               
            </div>
           
    </div>
        <p class="text-muted">Método Alternativo de pago para completar la compra:</p>
        <button class="btn btn-primary" @onclick="ProcesarPago" disabled="@disabled">Pagar</button>
    </div>
</div>

<style>
    .btn-wsp {
        position: fixed;
        width: 60px;
        height: 60px;
        line-height: 63px;
        bottom: 25px;
        right: 25px;
        background: #25d366;
        color: #FFF;
        border-radius: 50px;
        text-align: center;
        font-size: 35px;
        box-shadow: 0px 1px 10px rgba(0,0,0,0.3);
        z-index: 100;
        transition: all 300ms ease;
    }

        .btn-wsp:hover {
            background: #20ba5a;
        }

    @@media only screen and (min-width:320px) and (max-width:768px) {
        .btn-wsp {
            width: 63px;
            height: 63px;
            line-height: 66px;
        }
    }

    .btn-outline-dark {
        border-radius: 50px;
    }

    .btn-outline-secondary {
        border-radius: 50px;
    }
</style>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<a href="https://api.whatsapp.com/send?phone=+5491154569803&text=Lookeate" class="btn-wsp" target="_blank"><i class="fa fa-whatsapp icono"></i></a>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    private bool disabled = true;

    private List<CarritoDTO> lista = new List<CarritoDTO>();
    private decimal? TotalPagar = 0;
    private TarjetaDTO tarjeta = new TarjetaDTO();

    protected override async Task OnInitializedAsync()
    {
        lista = await carritoServicio.DevolverCarrito();

        var items = lista.Select(i => new CartItemDto
            {
                Quantity = i.Cantidad ?? 1,
                ProductId = i.Producto!.IdProducto
            }).AsEnumerable();

        var paymentData = await PaymentService.GetMercadoPago(items);

        await JS.InvokeVoidAsync("RenderMercadoPago", paymentData.Resultado!.PublicKey, paymentData.Resultado.Preference.Id);

        var authState = await authenticationState;

        if (authState.User.Identity!.IsAuthenticated)
            disabled = false;
    }

    private void Disminuir(int id)
    {
        CarritoDTO item = lista.First(i => i.Producto.IdProducto == id);

        if (item.Cantidad - 1 > 0)
        {
            item.Cantidad--;
            item.Total = item.Cantidad * item.Precio;
        }
    }

    private void Aumentar(int id)
    {
        CarritoDTO item = lista.First(i => i.Producto.IdProducto == id);
        item.Cantidad++;
        item.Total = item.Cantidad * item.Precio;
    }

    private async Task Eliminar(int idproducto)
    {
        var producto = lista.FirstOrDefault(i => i.Producto.IdProducto == idproducto);
        if (producto != null)
        {
            lista.Remove(producto);
            await carritoServicio.EliminarCarrito(idproducto);
        }
    }

    private async Task ProcesarPago()
    {
        if (lista.Count == 0)
        {
            toastService.ShowWarning("No se encontraron productos");
            return;
        }

        List<DetalleVentaDTO> detalle = new List<DetalleVentaDTO>();

        foreach (var item in lista)
        {
            detalle.Add(new DetalleVentaDTO()
                {
                    IdProducto = item.Producto.IdProducto,
                    Cantidad = item.Cantidad,
                    Total = item.Total
                });
        }

        VentaDTO modelo = new VentaDTO()
            {
                IdPersona = 1,
                Total = lista.Sum(i => i.Total),
                DetalleVenta = detalle
            };

        var response = await ventaServicio.Registrar(modelo);

        if (response.EsCorrecto)
        {
            await carritoServicio.LimpiarCarrito();
            toastService.ShowSuccess("Venta registrada");
            _navServicio.NavigateTo("/catalogo");
        }
        else
        {
            toastService.ShowError(response.Mensaje);
        }
    }
}
